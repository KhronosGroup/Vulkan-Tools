# Copyright (c) 2021-2023 Valve Corporation
# Copyright (c) 2021-2023 LunarG, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: tools

on:
    push:
    pull_request:
        branches:
            - main

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  # github.head_ref is only defined on pull_request
  # Fallback to the run ID, which is guaranteed to be both unique and defined for the run.
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id  }}
  cancel-in-progress: true

jobs:
    linux:
        runs-on: ${{matrix.os}}

        strategy:
            matrix:
                cc: [ gcc ]
                cxx: [ g++ ]
                config: [ Debug, Release ]
                os: [ ubuntu-20.04, ubuntu-22.04 ]
                cube_wsi: [ XCB ]
                include:
                    # Test WAYLAND
                  - cc: gcc
                    cxx: g++
                    config: Release
                    os: ubuntu-22.04
                    cube_wsi: WAYLAND
                    # Test clang on ubuntu 20 with XLIB
                  - cc: clang
                    cxx: clang++
                    config: Debug
                    os: ubuntu-20.04
                    cube_wsi: XLIB
                    # Test clang on ubuntu 22 with the DISPLAY option
                  - cc: clang
                    cxx: clang++
                    config: Release
                    os: ubuntu-22.04
                    cube_wsi: DISPLAY


        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-python@v4
              with:
                python-version: '3.7'
            - run: |
                sudo apt-get -qq update
                sudo apt install libwayland-dev xorg-dev wayland-protocols
            - uses: lukka/get-cmake@latest
              with:
                cmakeVersion: 3.17.2
            - name: Setup ccache
              uses: hendrikmuhs/ccache-action@v1.2
              with:
                key: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.cc }}-${{matrix.cube_wsi}}
            - name: Configure
              run: cmake -S. -B build -G "Ninja" -DCMAKE_BUILD_TYPE=${{matrix.config}} -DCUBE_WSI_SELECTION=${{matrix.cube_wsi}} -D UPDATE_DEPS=ON -D INSTALL_ICD=ON -D BUILD_TESTS=ON -D ENABLE_ADDRESS_SANITIZER=ON
              env:
                CC: ${{matrix.cc}}
                CXX: ${{matrix.cxx}}
                CMAKE_CXX_COMPILER_LAUNCHER: ccache
                CMAKE_C_COMPILER_LAUNCHER: ccache

            - name: Build
              run: cmake --build build

            - name: Install
              run: cmake --install build/ --prefix build/install

            - name: Test
              working-directory: ./build
              run: ctest --output-on-failure

            - name: Verify generated source files
              run: python scripts/generate_source.py --verify external/${{ matrix.config }}/Vulkan-Headers/build/install/share/vulkan/registry

    windows:
        runs-on: ${{matrix.os}}

        strategy:
            matrix:
                arch: [ Win32, x64 ]
                config: [ Debug, Release ]
                os: [ windows-latest ]

        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-python@v4
              with:
                python-version: '3.7'
            - uses: lukka/get-cmake@latest
            - uses: ilammy/msvc-dev-cmd@v1
              with:
                arch: ${{ matrix.arch }}

            - name: Configure
              run: cmake -S. -B build  -G "Ninja" -DCMAKE_BUILD_TYPE=${{matrix.config}} -D UPDATE_DEPS=ON -D INSTALL_ICD=ON

            - name: Build
              run: cmake --build ./build

            - name: Install
              run: cmake --install build/ --prefix build/install

            - name: Verify generated source files
              run: python scripts/generate_source.py --verify external/${{matrix.config}}/Vulkan-Headers/build/install/share/vulkan/registry

    mac:
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-python@v4
              with:
                python-version: '3.7'
            - uses: lukka/get-cmake@latest

            - name: Setup ccache
              uses: hendrikmuhs/ccache-action@v1.2
              with:
                key: macos

            # NOTE: Add ccache this way instead of with CMAKE_<LANG>_COMPILER_LAUNCHER since MoltenVK doesn't use CMake.
            - name: Add ccache to PATH
              run: echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

            - name: Configure
              run: cmake -S. -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -D UPDATE_DEPS=ON -D INSTALL_ICD=ON -D BUILD_TESTS=ON -D ENABLE_ADDRESS_SANITIZER=ON
              env:
                MACOSX_DEPLOYMENT_TARGET: 10.15

            - name: Build
              run: cmake --build build

            - name: Test
              working-directory: ./build
              run: ctest --output-on-failure

            - name: Verify generated source files
              run: python scripts/generate_source.py --verify external/Release/Vulkan-Headers/build/install/share/vulkan/registry

    gn:
        runs-on: ubuntu-20.04

        strategy:
            matrix:
                config: [ Debug, Release ]

        steps:
            - uses: actions/checkout@v3

            - name: Get depot tools
              run: |
                git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git depot_tools
                echo "$GITHUB_WORKSPACE/depot_tools" >> $GITHUB_PATH
            - name: Fetch and install headers
              run: ./build-gn/update_deps.sh

            - name: Generate build files
              run: gn gen out/${{matrix.config}} --args="is_debug=true"
              if: matrix.config != 'Release'

            - name: Generate build files
              run: gn gen out/${{matrix.config}} --args="is_debug=false"
              if: matrix.config == 'Release'

            - name: Build the tools
              run: ninja -C out/${{matrix.config}}

    android:
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v3
            - name: Setup Environment
              run: |
                  echo "ANDROID_SDK_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
                  echo "ANDROID_NDK_HOME=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
                  echo "$ANDROID_SDK_ROOT/build-tools/31.0.0" >> $GITHUB_PATH
                  echo "$ANDROID_NDK_LATEST_HOME" >> $GITHUB_PATH
                  $ANDROID_SDK_ROOT/tools/bin/sdkmanager "platforms;android-23"
                  keytool -genkey -v -keystore $HOME/.android/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "C=US, O=Android, CN=Android Debug"
            - name: Build vkcube
              run: |
                  cd build-android
                  ./build_all.sh
